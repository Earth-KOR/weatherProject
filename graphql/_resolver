const axios = require('axios');
const apiKey = require('../api.json');

const Weather = require('../model/weather');
const Clothes = require('../model/Clothes');
const clothes = require('../model/ClothesObj');

module.exports = {
  getWeather: async function ({ latitude, longitude }, req) {
    // 1. 위도 경도로 위치 검색

    const { weatherKey } = apiKey;
    const { GoogleKey } = apiKey;
    const googleApi = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${GoogleKey}`;
    const {
      data: { results }
    } = await axios.get(googleApi);
    // 2. 도시 이름 가져오기

    // API 잠시 하드코딩하기
    const locationData = results[0].formatted_address.split(',');
    const location = {
      contry: locationData[locationData.length - 1].trim(),
      city: locationData[locationData.length - 2].trim().split(' ')[0],
      gu: locationData[locationData.length - 3].trim()
    };
    console.log(location);
    // const location = {
    //   contry: 'south korea',
    //   city: 'Seoul',
    //   gu: 'Gangnam-gu'
    // };

    // 3. DB에 검사하기
    let isData = await Weather.where({ city: location.city });
    let forecastObj = {};

    // db에 없으면 가져오기
    if (isData.length === 0) {
      // 3. 날씨 가져오기
      let apiUrl = `http://api.openweathermap.org/data/2.5/forecast?q=${location.city}&appid=${weatherKey}&units=metric`;

      const { data } = await axios.get(apiUrl);

      let weatherArr = [];
      let i = 0;

      console.log(data.list[0]);

      for (let d of data.list) {
        weatherArr[i] = {
          time: d.dt,
          temp: Math.round(d.main.temp),
          feels_like: Math.round(d.main.feels_like),
          condition: d.weather[0].main,
          humidity: d.main.humidity,
          wind_speed: d.wind.speed,
          rain: d.rain || 0
        };
        i++;
      }

      // 임시로 값 5개만 넣어주기
      let tempArr = [];
      for (let j = 0; j < 5; j++) {
        tempArr.push(weatherArr[j]);
      }

      forecastObj = new Weather({
        city: location.city,
        gu: location.gu,
        // 임시값 바꿔주기
        weathers: tempArr
      });
      await forecastObj.save();
    } else {
      forecastObj = await Weather.findOne({ city: location.city });
    }

    return forecastObj;
  },
  getClothes: async function ({ temp }) {
    // 1. 온도에 따라 레벨 분류하기
    let tempLevel;
    if (temp <= -5) {
      tempLevel = 0;
    } else if (temp > -5 && temp <= 0) {
      tempLevel = 1;
    } else if (temp > 0 && temp <= 10) {
      tempLevel = 2;
    } else if (temp > 10 && temp <= 14) {
      tempLevel = 3;
    } else if (temp > 14 && temp <= 17) {
      tempLevel = 4;
    } else if (temp > 17 && temp <= 20) {
      tempLevel = 5;
    } else if (temp > 20 && temp <= 25) {
      tempLevel = 6;
    } else if (temp > 25 && temp <= 30) {
      tempLevel = 7;
    } else if (temp > 30 && temp <= 35) {
      tempLevel = 8;
    } else {
      tempLevel = 9;
    }

    // console.log(tempLevel);

    // 2. 레벨에 따라 가능한 옷 불러오기
    let tempArr = [];
    for (let i = 0; i < clothes.length; i++) {
      if (clothes[i].level.includes(tempLevel)) {
        tempArr.push(clothes[i]);
      }
    }

    return tempArr;
  },
  putClothes: async function ({ inputData: { name, type, temp, level } }) {
    console.log(level);

    const clothe1 = {
      name: '자켓',
      type: '아우터',
      temp: '20~30',
      level: [5, 6, 7]
    };

    const clothe2 = {
      name: '코트',
      type: '아우터',
      temp: '20~30',
      level: 5
    };
    let arr = [];
    arr.push(clothe1);
    const data = {
      name: '코트',
      type: '아우터',
      temp: '20~30',
      level: 5
    };

    return {
      name: '코트',
      tyle: '아우터',
      temp: '20~30',
      level: [4, 5, 6]
    };
  }
};
